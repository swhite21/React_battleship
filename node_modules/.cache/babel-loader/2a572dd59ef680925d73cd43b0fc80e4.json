{"ast":null,"code":"var _jsxFileName = \"/home/sebastian/Desktop/battleship/src/board.js\";\nimport React from 'react';\nimport { Container, Button } from 'react-bootstrap';\nimport SingleSquare from './singleSquare';\nimport PlaceShipsPopUp from './placeShipsPopup';\nimport InGameMenu from './ingamemenu.js';\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.playerReady = () => {\n      let _this$state = this.state,\n          player1 = _this$state.player1,\n          player2 = _this$state.player2,\n          currentPlayer = _this$state.currentPlayer;\n      let player = '';\n\n      if (currentPlayer == 1) {\n        player = player1;\n      } else if (currentPlayer == 2) {\n        player = player2;\n      }\n\n      player.readyUp = true;\n      this.setState({\n        player\n      });\n    };\n\n    this.onHoverHighlight = (index, boat) => {\n      let _this$state2 = this.state,\n          boardSpaces = _this$state2.boardSpaces,\n          destroyer = _this$state2.destroyer,\n          submarine = _this$state2.submarine,\n          smallBoat = _this$state2.smallBoat,\n          boatSelector = _this$state2.boatSelector,\n          shipList = _this$state2.shipList,\n          boatOut = _this$state2.boatOut;\n      let outofBounds = this.outofBounds,\n          outofBoundsReset = this.outofBoundsReset;\n      let boatLng = shipList[boatSelector][1].length;\n      console.log(shipList[boatSelector][1]);\n      let adjacentIndexes = [];\n\n      for (let i = 0; i < boatLng; i++) {\n        var num = i * 10;\n        adjacentIndexes.push(index - num);\n      }\n\n      adjacentIndexes.map(value => {\n        //prevents player for placing ships out of bounds\n        if (value >= 0 && value <= 99) {\n          document.getElementById(value).style.color = \"green\";\n\n          function returnColor() {\n            document.getElementById(value).style.color = \"\";\n          }\n\n          setTimeout(returnColor, 700);\n          outofBoundsReset();\n        } else {\n          outofBounds();\n          adjacentIndexes.map(value => {\n            if (value >= 0 && value <= 99) {\n              document.getElementById(value).style.color = \"red\";\n\n              function returnColor() {\n                document.getElementById(value).style.color = \"\";\n              }\n            }\n          });\n        }\n      });\n      console.log(\"hover on index \".concat(index, \",\").concat(adjacentIndexes));\n    };\n\n    this.powerUpChanger = currentPlayer => {\n      let _this$state3 = this.state,\n          player1 = _this$state3.player1,\n          player2 = _this$state3.player2,\n          powerUps = _this$state3.powerUps;\n\n      if (currentPlayer == 1) {\n        if (player1.powerup == powerUps.length - 1) {\n          player1.powerup = 0;\n          this.setState({\n            player1\n          });\n        } else {\n          player1.powerup = player1.powerup + 1;\n          this.setState({\n            player1\n          });\n        }\n      } else if (currentPlayer == 2) {\n        if (player2.powerup == powerUps.length - 1) {\n          player2.powerup = 0;\n          this.setState({\n            player2\n          });\n        } else {\n          player2.powerup = player2.powerup + 1;\n          this.setState({\n            player2\n          });\n        }\n      }\n    };\n\n    this.boatPlaced = () => {\n      let _this$state4 = this.state,\n          player1 = _this$state4.player1,\n          player2 = _this$state4.player2,\n          currentPlayer = _this$state4.currentPlayer;\n      let player = '';\n\n      if (currentPlayer == 1) {\n        player = player1;\n      } else if (currentPlayer == 2) {\n        player = player2;\n      }\n\n      let newNum = player.boatMap.map(value => {\n        if (value != \"\") {\n          return 1;\n        }\n      });\n      newNum = newNum.filter(value => {\n        return value >= 0;\n      });\n      let sum = newNum.reduce(add, 0);\n\n      function add(accumulator, a) {\n        return accumulator + a;\n      }\n\n      player.boatstoPlace = 3 - sum;\n      this.setState({\n        player\n      }); //color the boats by index\n\n      var x = document.getElementById(\"board\");\n      var y = x.getElementsByClassName(\"single-square\");\n      var i;\n\n      for (i = 0; i < y.length; i++) {\n        y[i].style.backgroundColor = \"#94aace\";\n      }\n\n      player.boatMap.map(value => {\n        value.map(value => {\n          document.getElementById(value).style.backgroundColor = \"green\";\n        });\n      });\n    };\n\n    this.placeBoat = clickedIndex => {\n      let _this$state5 = this.state,\n          player1 = _this$state5.player1,\n          player2 = _this$state5.player2,\n          boatSelector = _this$state5.boatSelector,\n          currentPlayer = _this$state5.currentPlayer,\n          shipList = _this$state5.shipList;\n      let boatPlaced = this.boatPlaced;\n      let player = '';\n\n      if (currentPlayer == 1) {\n        player = player1;\n      } else if (currentPlayer == 2) {\n        player = player2;\n      }\n\n      let boatLng = shipList[boatSelector][1].length;\n      let adjacentIndexes = [];\n\n      for (let i = 0; i < boatLng; i++) {\n        var num = i * 10;\n        adjacentIndexes.push(clickedIndex - num);\n      }\n\n      player.boatMap[boatSelector] = adjacentIndexes;\n      this.setState({\n        player\n      });\n      boatPlaced();\n    };\n\n    this.boatSelectorChange = () => {\n      let _this$state6 = this.state,\n          boatSelector = _this$state6.boatSelector,\n          shipList = _this$state6.shipList;\n\n      if (boatSelector < shipList.length - 1) {\n        this.setState({\n          boatSelector: boatSelector + 1\n        });\n      } else {\n        this.setState({\n          boatSelector: 0\n        });\n      }\n    };\n\n    this.startGame = () => {\n      let _this$state7 = this.state,\n          boardSpaces = _this$state7.boardSpaces,\n          populatedBoard = _this$state7.populatedBoard,\n          squareStateColor = _this$state7.squareStateColor,\n          placementMode = _this$state7.placementMode;\n      let onHoverHighlight = this.onHoverHighlight,\n          placeBoat = this.placeBoat;\n      let boardpop = boardSpaces.map(maphandler);\n      this.setState({\n        placementMode: true\n      });\n\n      function maphandler(value, index) {\n        return React.createElement(SingleSquare, {\n          value: value,\n          squareStateColor: squareStateColor,\n          onHoverHighlight: onHoverHighlight,\n          placeBoat: placeBoat,\n          index: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 189\n          },\n          __self: this\n        });\n      }\n\n      this.setState({\n        populatedBoard: boardpop\n      });\n    };\n\n    this.placmentPopUpHandler = () => {\n      let placeShipsShow = this.state.placeShipsShow;\n      this.setState({\n        placeShipsShow: false\n      });\n    };\n\n    this.outofBounds = () => {\n      console.log(\"ran out\");\n      let boatOut = this.state.boatOut;\n      this.setState({\n        boatOut: true\n      });\n    };\n\n    this.outofBoundsReset = () => {\n      console.log(\"ran reset\");\n      let boatOut = this.state.boatOut;\n      this.setState({\n        boatOut: false\n      });\n    };\n\n    this.switchPlayer = () => {\n      let currentPlayer = this.state.currentPlayer;\n      let playerReady = this.playerReady;\n\n      if (currentPlayer == 1) {\n        document.getElementById('in-game-menu').style.cssFloat = \"right\";\n        this.setState({\n          currentPlayer: 2\n        });\n      } else if (currentPlayer == 2) {\n        document.getElementById('in-game-menu').style.cssFloat = \"left\";\n        this.setState({\n          currentPlayer: 1\n        });\n      }\n\n      var x = document.getElementById(\"board\");\n      var y = x.getElementsByClassName(\"single-square\");\n      var i;\n\n      for (i = 0; i < y.length; i++) {\n        y[i].style.backgroundColor = \"#94aace\";\n        playerReady();\n      }\n    };\n\n    this.state = {\n      boardSpaces: [\"1A\", \"2A\", \"3A\", \"4A\", \"5A\", \"6A\", \"7A\", \"8A\", \"9A\", \"10A\", \"1B\", \"2B\", \"3B\", \"4B\", \"5B\", \"6B\", \"7B\", \"8B\", \"9B\", \"10B\", \"1C\", \"2C\", \"3C\", \"4C\", \"5C\", \"6C\", \"7C\", \"8C\", \"9C\", \"10C\", \"1D\", \"2D\", \"3D\", \"4D\", \"5D\", \"6D\", \"7D\", \"8D\", \"9D\", \"10D\", \"1E\", \"2E\", \"3E\", \"4E\", \"5E\", \"6E\", \"7E\", \"8E\", \"9E\", \"10E\", \"1F\", \"2F\", \"3F\", \"4F\", \"5F\", \"6F\", \"7F\", \"8F\", \"9F\", \"10F\", \"1G\", \"2G\", \"3G\", \"4G\", \"5G\", \"6G\", \"7G\", \"8G\", \"9G\", \"10G\", \"1H\", \"2H\", \"3H\", \"4H\", \"5H\", \"6H\", \"7H\", \"8H\", \"9H\", \"10H\", \"1I\", \"2I\", \"3I\", \"4I\", \"5I\", \"6I\", \"7I\", \"8I\", \"9I\", \"10I\", \"1J\", \"2J\", \"3J\", \"4J\", \"5J\", \"6J\", \"7J\", \"8J\", \"9J\", \"10J\"],\n      powerUps: [\"Bomber\", \"Collision\", \"Radar\"],\n      populatedBoard: [React.createElement(\"singleSquare\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      })],\n      player1: {\n        boatsleft: 3,\n        boatstoPlace: 3,\n        powerup: 0,\n        boatMap: [[], [], []],\n        readyUp: false\n      },\n      player2: {\n        boatsleft: 3,\n        boatstoPlace: 3,\n        powerup: 0,\n        boatMap: [[], [], []],\n        readyUp: false\n      },\n      boatSelector: 0,\n      shipList: [[\"destroyer\", [\"D\", \"D\", \"D\", \"D\", \"D\"]], [\"submarine\", [\"S\", \"S\", \"S\", \"S\"]], [\"smallBoat\", [\"B\", \"B\"]]],\n      //passed to each space to determine the squares state in color\n      placeShipsShow: true,\n      placementMode: false,\n      currentPlayer: 1,\n      boatOut: false\n    };\n  }\n\n  render() {\n    let _this$state8 = this.state,\n        powerUps = _this$state8.powerUps,\n        player1 = _this$state8.player1,\n        player2 = _this$state8.player2,\n        boatOut = _this$state8.boatOut,\n        placementMode = _this$state8.placementMode,\n        populatedBoard = _this$state8.populatedBoard,\n        placeShipsShow = _this$state8.placeShipsShow,\n        currentPlayer = _this$state8.currentPlayer,\n        shipList = _this$state8.shipList,\n        boatSelector = _this$state8.boatSelector;\n    let placmentPopUpHandler = this.placmentPopUpHandler,\n        startGame = this.startGame,\n        boatSelectorChange = this.boatSelectorChange,\n        onHoverHighlight = this.onHoverHighlight,\n        powerUpChanger = this.powerUpChanger,\n        switchPlayer = this.switchPlayer;\n    return React.createElement(\"div\", {\n      className: \"board-bg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }, placementMode && React.createElement(InGameMenu, {\n      shipList: shipList,\n      powerUpChanger: powerUpChanger,\n      onHoverHighlight: onHoverHighlight,\n      currentPlayer: currentPlayer,\n      boatSelectorChange: boatSelectorChange,\n      boatSelector: boatSelector,\n      player1: player1,\n      player2: player2,\n      powerUps: powerUps,\n      switchPlayer: switchPlayer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }), placeShipsShow && React.createElement(PlaceShipsPopUp, {\n      placmentPopUpHandler: placmentPopUpHandler,\n      currentPlayer: currentPlayer,\n      startGame: startGame,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }), boatOut && React.createElement(\"div\", {\n      className: \"alert alert-danger\",\n      id: \"out-of-bounds\",\n      role: \"alert\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }, \"Out of bounds\"), React.createElement(\"div\", {\n      id: \"board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255\n      },\n      __self: this\n    }, populatedBoard));\n  }\n\n}\n\nexport default Board;","map":{"version":3,"sources":["/home/sebastian/Desktop/battleship/src/board.js"],"names":["React","Container","Button","SingleSquare","PlaceShipsPopUp","InGameMenu","Board","Component","constructor","props","playerReady","state","player1","player2","currentPlayer","player","readyUp","setState","onHoverHighlight","index","boat","boardSpaces","destroyer","submarine","smallBoat","boatSelector","shipList","boatOut","outofBounds","outofBoundsReset","boatLng","length","console","log","adjacentIndexes","i","num","push","map","value","document","getElementById","style","color","returnColor","setTimeout","powerUpChanger","powerUps","powerup","boatPlaced","newNum","boatMap","filter","sum","reduce","add","accumulator","a","boatstoPlace","x","y","getElementsByClassName","backgroundColor","placeBoat","clickedIndex","boatSelectorChange","startGame","populatedBoard","squareStateColor","placementMode","boardpop","maphandler","placmentPopUpHandler","placeShipsShow","switchPlayer","cssFloat","boatsleft","render"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {Container, Button} from 'react-bootstrap'\nimport SingleSquare from './singleSquare'\nimport PlaceShipsPopUp from './placeShipsPopup'\nimport InGameMenu from './ingamemenu.js'\n\n\nclass Board extends React.Component{\n  constructor(props){\n    super(props)\n    this.state={\n      boardSpaces:[ \"1A\",\"2A\",\"3A\",\"4A\",\"5A\",\"6A\",\"7A\",\"8A\",\"9A\",\"10A\",\n                    \"1B\",\"2B\",\"3B\",\"4B\",\"5B\",\"6B\",\"7B\",\"8B\",\"9B\",\"10B\",\n                    \"1C\",\"2C\",\"3C\",\"4C\",\"5C\",\"6C\",\"7C\",\"8C\",\"9C\",\"10C\",\n                    \"1D\",\"2D\",\"3D\",\"4D\",\"5D\",\"6D\",\"7D\",\"8D\",\"9D\",\"10D\",\n                    \"1E\",\"2E\",\"3E\",\"4E\",\"5E\",\"6E\",\"7E\",\"8E\",\"9E\",\"10E\",\n                    \"1F\",\"2F\",\"3F\",\"4F\",\"5F\",\"6F\",\"7F\",\"8F\",\"9F\",\"10F\",\n                    \"1G\",\"2G\",\"3G\",\"4G\",\"5G\",\"6G\",\"7G\",\"8G\",\"9G\",\"10G\",\n                    \"1H\",\"2H\",\"3H\",\"4H\",\"5H\",\"6H\",\"7H\",\"8H\",\"9H\",\"10H\",\n                    \"1I\",\"2I\",\"3I\",\"4I\",\"5I\",\"6I\",\"7I\",\"8I\",\"9I\",\"10I\",\n                    \"1J\",\"2J\",\"3J\",\"4J\",\"5J\",\"6J\",\"7J\",\"8J\",\"9J\",\"10J\"\n                  ],\n      powerUps: [\"Bomber\", \"Collision\", \"Radar\"],\n      populatedBoard: [<singleSquare />],\n      player1: {  boatsleft: 3,\n                  boatstoPlace: 3,\n                  powerup: 0,\n                  boatMap: [[],[],[]],\n                  readyUp: false\n                },\n      player2: {  boatsleft: 3,\n                  boatstoPlace: 3,\n                  powerup: 0,\n                  boatMap: [[],[],[]],\n                  readyUp: false\n                },\n      boatSelector: 0,\n      shipList: [[\"destroyer\",[\"D\",\"D\",\"D\",\"D\",\"D\"]], [\"submarine\",[\"S\",\"S\",\"S\",\"S\"]], [\"smallBoat\",[\"B\",\"B\"]]],\n    //passed to each space to determine the squares state in color\n      placeShipsShow: true,\n      placementMode: false,\n      currentPlayer: 1,\n      boatOut: false\n    }\n  }\n  playerReady = ()=>{\n    let{player1, player2, currentPlayer}=this.state\n    let player = ''\n    if (currentPlayer == 1){\n      player = player1\n    }else if(currentPlayer == 2){\n      player = player2\n    }\n    player.readyUp = true\n    this.setState({player})\n  }\n  onHoverHighlight = (index, boat)=>{\n    let{boardSpaces, destroyer, submarine, smallBoat, boatSelector, shipList, boatOut}=this.state\n    let{outofBounds, outofBoundsReset}=this\n    let boatLng = shipList[boatSelector][1].length\n    console.log(shipList[boatSelector][1]);\n    let adjacentIndexes = []\n\n      for(let i = 0; i < boatLng; i++){\n        var num = i*10\n        adjacentIndexes.push(index-num)\n      }\n\n      adjacentIndexes.map((value)=>{\n        //prevents player for placing ships out of bounds\n          if(value >= 0 && value <= 99){\n        document.getElementById(value).style.color = \"green\"\n        function returnColor(){\n          document.getElementById(value).style.color = \"\"\n        }\n        setTimeout(returnColor, 700)\n        outofBoundsReset()\n      }else{\n      outofBounds()\n        adjacentIndexes.map((value)=>{\n          if(value >= 0 && value <= 99){\n          document.getElementById(value).style.color = \"red\"\n          function returnColor(){\n            document.getElementById(value).style.color = \"\"\n          }}\n        })\n\n      }\n      })\n    console.log(`hover on index ${index},${adjacentIndexes}`);\n\n  }\n  powerUpChanger = (currentPlayer) =>{\n    let{player1, player2, powerUps}= this.state\n\n      if(currentPlayer == 1){\n        if(player1.powerup == powerUps.length-1){\n          player1.powerup = 0\n          this.setState({player1})\n        }else{\n        player1.powerup = player1.powerup +1\n        this.setState({player1})\n        }\n      }else if (currentPlayer == 2){\n        if(player2.powerup == powerUps.length-1){\n          player2.powerup = 0\n          this.setState({player2})\n        }else{\n        player2.powerup = player2.powerup +1\n        this.setState({player2})\n        }\n      }\n  }\n  boatPlaced=()=>{\n    let{player1, player2, currentPlayer}=this.state\n    let player = ''\n    if (currentPlayer == 1){\n      player = player1\n    }else if(currentPlayer == 2){\n      player = player2\n    }\n\n    let newNum = player.boatMap.map((value)=>{\n        if(value != \"\"){\n          return 1\n        }\n      })\n    newNum = newNum.filter((value)=>{\n      return value >= 0\n    })\n    let sum = newNum.reduce(add, 0)\n    function add(accumulator, a) {\n    return accumulator + a;\n    }\n    player.boatstoPlace = 3 -sum\n    this.setState({player})\n    //color the boats by index\n    var x = document.getElementById(\"board\");\n    var y = x.getElementsByClassName(\"single-square\");\n    var i;\n    for (i = 0; i < y.length; i++) {\n      y[i].style.backgroundColor = \"#94aace\";\n    }\n    player.boatMap.map((value)=>{\n      value.map((value)=>{\n        document.getElementById(value).style.backgroundColor= \"green\"\n      })\n    })\n  }\n\n  placeBoat =(clickedIndex)=>{\n  let{player1, player2, boatSelector, currentPlayer, shipList}=this.state\n  let{boatPlaced}=this\n\n  let player = ''\n  if (currentPlayer == 1){\n    player = player1\n  }else if(currentPlayer == 2){\n    player = player2\n  }\n\n  let boatLng = shipList[boatSelector][1].length\n  let adjacentIndexes = []\n\n  for(let i = 0; i < boatLng; i++){\n    var num = i*10\n    adjacentIndexes.push(clickedIndex-num)\n  }\n  player.boatMap[boatSelector] = adjacentIndexes\n  this.setState({player})\n  boatPlaced()\n\n  }\n\n  boatSelectorChange = ()=>{\n    let{boatSelector, shipList}=this.state\n      if (boatSelector < shipList.length - 1){\n      this.setState({boatSelector: boatSelector+1})\n    }else{\n      this.setState({boatSelector: 0})\n    }\n  }\n  startGame =()=>{\n    let{boardSpaces, populatedBoard, squareStateColor, placementMode}=this.state\n    let{onHoverHighlight, placeBoat}=this\n    let boardpop = boardSpaces.map(maphandler)\n    this.setState({placementMode:true})\n    function maphandler(value, index){\n      return <SingleSquare value={value}\n              squareStateColor={squareStateColor}\n              onHoverHighlight={onHoverHighlight}\n              placeBoat={placeBoat}\n              index={index}\n\n      />\n    }\n    this.setState({populatedBoard: boardpop})\n  }\n  placmentPopUpHandler =()=>{\n    let{placeShipsShow}=this.state\n    this.setState({placeShipsShow: false})\n  }\n  outofBounds =()=>{\n    console.log(\"ran out\");\n    let{boatOut}=this.state\n    this.setState({boatOut:true})\n  }\n  outofBoundsReset =()=>{\n    console.log(\"ran reset\");\n    let{boatOut}=this.state\n    this.setState({boatOut:false})\n  }\n  switchPlayer = ()=>{\n    let{currentPlayer}=this.state\n    let{playerReady}=this\n    if (currentPlayer == 1) {\n      document.getElementById('in-game-menu').style.cssFloat = \"right\"\n      this.setState({currentPlayer: 2})\n    }else if(currentPlayer ==2){\n      document.getElementById('in-game-menu').style.cssFloat = \"left\"\n      this.setState({currentPlayer: 1})\n    }\n    var x = document.getElementById(\"board\");\n    var y = x.getElementsByClassName(\"single-square\");\n    var i;\n    for (i = 0; i < y.length; i++) {\n      y[i].style.backgroundColor = \"#94aace\";\n    playerReady()\n    }\n  }\n\n  render(){\n    let{powerUps, player1, player2, boatOut, placementMode, populatedBoard, placeShipsShow, currentPlayer, shipList, boatSelector}=this.state\n    let{placmentPopUpHandler, startGame, boatSelectorChange, onHoverHighlight, powerUpChanger, switchPlayer}=this\n    return(\n    <div className=\"board-bg\">\n    { placementMode &&<InGameMenu shipList={shipList}\n              powerUpChanger={powerUpChanger}\n              onHoverHighlight={onHoverHighlight}\n              currentPlayer={currentPlayer}\n              boatSelectorChange={boatSelectorChange}\n              boatSelector={boatSelector}\n              player1={player1}\n              player2={player2}\n              powerUps={powerUps}\n              switchPlayer={switchPlayer}\n    />}\n      {placeShipsShow && <PlaceShipsPopUp\n        placmentPopUpHandler={placmentPopUpHandler}\n        currentPlayer={currentPlayer}\n        startGame={startGame}\n        />\n      }\n      {boatOut && <div className=\"alert alert-danger\" id=\"out-of-bounds\" role=\"alert\">Out of bounds</div>}\n    <div id=\"board\">\n    {populatedBoard}\n    </div>\n    </div>\n  );\n  }\n\n}\nexport default Board\n"]},"metadata":{},"sourceType":"module"}